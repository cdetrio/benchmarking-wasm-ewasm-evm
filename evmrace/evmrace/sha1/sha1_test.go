// based on go-ethereum/core/vm/runtime/runtime_test.go

package runtime

import (
	"strings"
	"testing"
	"fmt"
	
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/ethdb"
)


func BenchmarkSha1(b *testing.B) {
	//fmt.Println("Benchmarksha1.")
	// https://etherscan.io/address/0x4e89a683dade995736457bde623e75f5840c2d34#code
	var definition = `[{"constant":true,"inputs":[{"name":"data","type":"bytes"},{"name":"hash","type":"bytes"}],"name":"verify","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"}]`

	var code = common.Hex2Bytes("6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f7e83aee8114610045575b600080fd5b34801561005157600080fd5b506100716024600480358281019290820135918135918201910135610085565b604080519115158252519081900360200190f35b60008060006100ce600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843750949594505063ffffffff6101351692505050565b6bffffffffffffffffffffffff1916915061011887878080601f01602080910402602001604051908101604052809392919081815260200183838082843750610161945050505050565b6bffffffffffffffffffffffff1916919091149695505050505050565b815160009060148301111561014957600080fd5b5001602001516bffffffffffffffffffffffff191690565b60006040518251602084019350604067ffffffffffffffc06001830116016009828203106001811461019257610199565b6040820191505b50776745230100efcdab890098badcfe001032547600c3d2e1f06101ec565b6000838310156101e5575080820151928290039260208410156101e55760001960208590036101000a0119165b9392505050565b60005b828110156105b2576102028482896101b8565b85526102128460208301896101b8565b60208601526040818503106001811461022a57610233565b60808286038701535b506040830381146001811461024757610255565b602086018051600887021790525b5060405b60808110156102dd57858101603f19810151603719820151601f19830151600b198401516002911891909218189081027ffffffffefffffffefffffffefffffffefffffffefffffffefffffffefffffffe1663800000009091047c010000000100000001000000010000000100000001000000010000000116179052600c01610259565b5060805b61014081101561036657858101607f19810151606f19820151603f198301516017198401516004911891909218189081027ffffffffcfffffffcfffffffcfffffffcfffffffcfffffffcfffffffcfffffffc1663400000009091047c0300000003000000030000000300000003000000030000000300000003161790526018016102e1565b508160008060005b60508110156105885760148104801561039e57600181146103da5760028114610414576003811461045357610489565b6501000000000085046a0100000000000000000000860481186f01000000000000000000000000000000870416189350635a8279999250610489565b6501000000000085046f0100000000000000000000000000000086046a0100000000000000000000870418189350636ed9eba19250610489565b6a010000000000000000000085046f010000000000000000000000000000008604818117650100000000008804169116179350638f1bbcdc9250610489565b6501000000000085046f0100000000000000000000000000000086046a010000000000000000000087041818935063ca62c1d692505b50601f770800000000000000000000000000000000000000000000008504168063ffffffe073080000000000000000000000000000000000000087041617905080840190508063ffffffff86160190508083019050807c0100000000000000000000000000000000000000000000000000000000600484028c0151040190507401000000000000000000000000000000000000000081026501000000000086041794506a0100000000000000000000633fffffff6a040000000000000000000087041663c00000006604000000000000880416170277ffffffff00ffffffff000000000000ffffffff00ffffffff86161794505060018101905061036e565b5050509190910177ffffffff00ffffffff00ffffffff00ffffffff00ffffffff16906040016101ef565b506c0100000000000000000000000063ffffffff821667ffffffff000000006101008404166bffffffff0000000000000000620100008504166fffffffff000000000000000000000000630100000086041673ffffffff0000000000000000000000000000000064010000000087041617171717029450505050509190505600a165627a7a723058205141ef912fb4560d9fda28a7c91dcf4da60e01ba569d15ae1b3dae2455f0c8600029")

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		b.Fatal(err)
	}
	
	//input := common.Hex2Bytes("616263")
	//expected := common.Hex2Bytes("a9993e364706816aba3e25717850c26c9cd0d89d")
	// this is wrong hash.  should fail
	//expected := common.Hex2Bytes("a9993e364706816aba3e25717850c26c9cd0d89e")

	// sha1 test vectors from https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/secure-hashing#shavs
	// FIPS 180-4 "SHA Test Vectors for Hashing Byte-Oriented Messages"

	// input := common.Hex2Bytes("6cb70d19c096200f9249d2dbc04299b0085eb068257560be3a307dbd741a3378ebfa03fcca610883b07f7fea563a866571822472dade8a0bec4b98202d47a344312976a7bcb3964427eacb5b0525db22066599b81be41e5adaf157d925fac04b06eb6e01deb753babf33be16162b214e8db017212fafa512cdc8c0d0a15c10f632e8f4f47792c64d3f026004d173df50cf0aa7976066a79a8d78deeeec951dab7cc90f68d16f786671feba0b7d269d92941c4f02f432aa5ce2aab6194dcc6fd3ae36c8433274ef6b1bd0d314636be47ba38d1948343a38bf9406523a0b2a8cd78ed6266ee3c9b5c60620b308cc6b3a73c6060d5268a7d82b6a33b93a6fd6fe1de55231d12c97")
	// expected := common.Hex2Bytes("4a75a406f4de5f9e1132069d66717fc424376388")
	
	
	input := common.Hex2Bytes("{{input}}")
	expected := common.Hex2Bytes("{{expected}}")

	verifyinput, err := abi.Pack("verify", input, expected)

	if err != nil {
		b.Fatal(err)
	}

	var cfg = new(Config)
	setDefaults(cfg)
	cfg.State, _ = state.New(common.Hash{}, state.NewDatabase(ethdb.NewMemDatabase()))

	var (
		address = common.BytesToAddress([]byte("contract"))
		vmenv   = NewEnv(cfg)
		sender  = vm.AccountRef(cfg.Origin)
	)

	cfg.State.CreateAccount(address)
	cfg.State.SetCode(address, code)

	var (
		ret  []byte
		exec_err  error
		leftOverGas uint64
		//cfg_state *state.StateDB
		//data = make([]byte, len(verifyinput))
	)
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		ret, leftOverGas, exec_err = vmenv.Call(sender, address, verifyinput, cfg.GasLimit, cfg.Value)
		//res, _, exec_err = Execute(code, verifyinput, nil)
	}
	b.StopTimer()

	gasUsed := cfg.GasLimit - leftOverGas

	if exec_err != nil {
		b.Error(exec_err)
		return
	}
	if common.Bytes2Hex(ret) != "0000000000000000000000000000000000000000000000000000000000000001" {
		b.Error(fmt.Sprintf("Expected %v, got %v", expected, common.Bytes2Hex(ret)))
		return
	}
	fmt.Println("gasUsed:", gasUsed)

}
