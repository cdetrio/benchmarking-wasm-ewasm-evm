package fluence.node.workers.tendermint.config

/**
 * Representation of Tendermint config.toml
 * NOTE: external_address, proxy_app, persistent_peers and moniker are
 * missing here because they are generated in [[ConfigTemplate.updateConfigTOML]]
 *
 * @param logLevel Logging level, could be something like "main:info,p2p:error"
 * @param maxInboundPeers  Maximum number of inbound p2p peers
 * @param mempoolSize Maximum number of transactions in mempool. Txs are stored as linked list, so it's not preallocated.
 * @param mempoolCacheSize Maximum number of tx hashes in mempool cache
 * @param commitTimeoutMs Timeout a proposer should wait before committing block. Wait even if 2/3+ votes received. See https://stackoverflow.com/questions/52790981/confusion-about-tendermint-block-creation-interval/52881658#52881658
 * @param skipCommitTimeout If this is true, proposer wouldn't wait for `commitTimeoutMs`, it will commit immediately after receiving 2/3+ vots
 * @param createEmptyBlocks Create empty blocks when there's no txs. See https://github.com/tendermint/tendermint/issues/3307#issuecomment-463520817
 * @param prometheus If true, enable prometheus metrics
 * @param port Port to connect ABCI to. It's the same for all Tendermint instances created by this Node as they are behind Docker network
 */
case class TendermintConfig(
  logLevel: String,
  maxInboundPeers: Int,
  mempoolSize: Int,
  mempoolCacheSize: Int,
  commitTimeoutMs: Long,
  skipCommitTimeout: Boolean,
  createEmptyBlocks: Boolean,
  prometheus: Boolean,
  abciPort: Short
) {
  private val mapping = Map(
    "log_level" -> logLevel,
    "p2p.max_num_inbound_peers" -> maxInboundPeers,
    "mempool.size" -> mempoolSize,
    "mempool.cache_size" -> mempoolCacheSize,
    "consensus.timeout_commit" -> commitTimeoutMs,
    "consensus.skip_timeout_commit" -> skipCommitTimeout,
    "consensus.create_empty_blocks" -> createEmptyBlocks,
    "instrumentation.prometheus" -> prometheus,
  )

  /**
   * Removes all values that should be customized from original config
   * @param config Source Tendermint config, usually default generated by `tendermint init`
   * @return Config without values that would be overridden by [[generate]]
   */
  def filter(config: Iterator[String]): Iterator[String] = config.filter(mapping.contains)

  /**
   * Generates a part of Tendermint's config.toml
   * @param workerPeerAddress Tendermint p2p peer address, i.e., [[fluence.node.eth.state.WorkerPeer.peerAddress]]
   * @param workerIndex Index of current peer among all cluster peers, i.e., [[fluence.node.eth.state.WorkerPeer.index]]
   * @param abciHost Host to connect ABCI to
   * @param persistentPeers Tendermint cluster peers, as defined by smart contract
   * @param appId App id, as defined by smart contract
   * @return List of configuration lines, ready to be appended to config.toml
   */
  def generate(
    workerPeerAddress: String,
    workerIndex: Int,
    abciHost: String,
    persistentPeers: Vector[String],
    appId: Long,
  ): List[String] = {

    val config = Map(
      "proxy_app" -> s"tcp://$abciHost:$abciPort",
      "moniker" -> s"${appId}_$workerIndex",
      "p2p.external_address" -> workerPeerAddress,
      "p2p.persistent_peers" -> persistentPeers.mkString(","),
    ) ++ mapping

    config.map { case (k, v) => s"""$k = "$v" """ }.toList
  }
}
